// ================================
// CONFIG SERVER (GIT-BASED)
// ================================

// pom.xml
<dependencies>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-config-server</artifactId>
    </dependency>
</dependencies>

// application.yml
server:
  port: 8888

spring:
  application:
    name: config-server
  cloud:
    config:
      server:
        git:
          uri: https://github.com/your-org/config-repo
          clone-on-start: true
          search-paths: error-configs

// Main Application Class
@SpringBootApplication
@EnableConfigServer
public class ConfigServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(ConfigServerApplication.class, args);
    }
}

/*
USAGE:
Store error configurations in Git as YAML files under a folder like `error-configs/`

Example file: `error-configs/error-service-dev.yml`

Contents:
error:
  messages:
    USER_NOT_FOUND:
      code: 1001
      httpStatus: 404
      message: "User not found"
    INTERNAL_ERROR:
      code: 1002
      httpStatus: 500
      message: "Unexpected server error"

Microservices will fetch configs by:
- spring.application.name (e.g., error-service)
- profile (e.g., dev)
- label (e.g., main)

Request:
GET http://localhost:8888/error-service/dev/main

Response (example):
{
  "name": "error-service",
  "profiles": ["dev"],
  "label": "main",
  "propertySources": [
    {
      "name": "https://github.com/your-org/config-repo/error-service-dev.yml",
      "source": {
        "error.messages.USER_NOT_FOUND.code": "1001",
        "error.messages.USER_NOT_FOUND.httpStatus": 404,
        "error.messages.USER_NOT_FOUND.message": "User not found"
      }
    }
  ]
}
*/

// ================================
// CLIENT SERVICE (MICROSERVICE)
// ================================

// pom.xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-config</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
</dependencies>

// bootstrap.yml
spring:
  application:
    name: error-service
  cloud:
    config:
      uri: http://localhost:8888
      profile: dev
      label: main

management:
  endpoints:
    web:
      exposure:
        include: refresh

// ErrorProperties.java
@Component
@ConfigurationProperties(prefix = "error.messages")
public class ErrorProperties {
    private Map<String, ErrorDetail> messages = new HashMap<>();

    public Map<String, ErrorDetail> getMessages() {
        return messages;
    }

    public void setMessages(Map<String, ErrorDetail> messages) {
        this.messages = messages;
    }

    public ErrorDetail getError(String key) {
        return messages.get(key);
    }

    public static class ErrorDetail {
        private String code;
        private int httpStatus;
        private String message;

        // Getters and setters
    }
}

// ErrorController.java
@RestController
@RequestMapping("/errors")
public class ErrorController {

    @Autowired
    private ErrorProperties errorProperties;

    @GetMapping("/{key}")
    public ResponseEntity<Object> getError(@PathVariable String key) {
        ErrorProperties.ErrorDetail detail = errorProperties.getError(key);
        if (detail == null) {
            return ResponseEntity.status(404).body("Error code not found");
        }
        return ResponseEntity.status(detail.getHttpStatus()).body(detail);
    }
}
