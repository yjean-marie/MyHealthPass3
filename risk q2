Perfect ‚Äî thanks for pointing that out. We should definitely embed that detail because it shows controlled, auditable access to production DB. Here‚Äôs the revised Q2 answer with that line included in the right place:


---

Answer (Q2 ‚Äì Data Protection):
Data within the application is protected using multiple layers of security controls:

In-Transit Protection: All API calls require a valid RBC-issued certificate and are secured with SSL/TLS (using the most current enterprise standard, e.g., TLS 1.2/1.3). The application is hosted internally on the corporate network and is not publicly exposed.

At Rest Protection: SQL Server databases are encrypted at rest. Application secrets (API keys, DB credentials) are securely managed in Vault.

Access Controls: Role-based access controls ensure that users only have access to data relevant to their jurisdiction (e.g., Bahamas users cannot view Curacao clients). End-user access to production data is strictly through the application‚Äôs authentication and authorization model. Direct access to the production database is not permitted; it is only possible via a formal FHIR call ID request through the Production Support team.

Data Masking: Lower environments use data masking to ensure no production data is exposed during development or testing. In production, masking is not applied since authorized business users require full access to client data.

Monitoring: Activity is continuously monitored using Dynatrace, Kibana/Elastic, and Splunk, integrated with the enterprise logging and alerting framework.



---

That should cover all angles: data in transit, data at rest, access controls (including the FHIR call ID requirement), masking in lower envs, and monitoring. ‚úÖ

üëâ Do you want me to make the same kind of risk-based acceptance file draft for Q2 as we did for Q1, or is this one good as a ‚ÄúYes + description‚Äù answer?

