The issue is likely due to the way the CachedBodyHttpServletResponse is handling the response stream. Since the response wrapper captures the body, it needs to ensure the response is written back to the original response output stream after logging.


---

üîß Solution: Ensure the Response Body is Properly Written

Modify LoggingFilter to write back the response body after capturing it.


---

1Ô∏è‚É£ Fix LoggingFilter

üìÇ src/main/java/com/example/api/filter/LoggingFilter.java

package com.example.api.filter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

@Component
public class LoggingFilter implements Filter {

    private static final Logger logger = LoggerFactory.getLogger(LoggingFilter.class);

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {
            CachedBodyHttpServletRequest wrappedRequest = new CachedBodyHttpServletRequest((HttpServletRequest) request);
            CachedBodyHttpServletResponse wrappedResponse = new CachedBodyHttpServletResponse((HttpServletResponse) response);

            // Extract Headers and Body
            Map<String, String> requestHeaders = getHeaders(wrappedRequest);
            String requestBody = wrappedRequest.getBody();

            logger.info("Incoming Request: {} {} | Headers: {} | Body: {}",
                    wrappedRequest.getMethod(), wrappedRequest.getRequestURI(), requestHeaders, requestBody);

            // Process the request
            chain.doFilter(wrappedRequest, wrappedResponse);

            // Capture response headers and body
            Map<String, String> responseHeaders = getHeaders(wrappedResponse);
            String responseBody = wrappedResponse.getBody();

            logger.info("Outgoing Response: Status {} | Headers: {} | Body: {}",
                    wrappedResponse.getStatus(), responseHeaders, responseBody);

            // Write the captured response body back to the original response
            response.getWriter().write(responseBody);
            response.getWriter().flush();
        } else {
            chain.doFilter(request, response);
        }
    }

    private Map<String, String> getHeaders(HttpServletRequest request) {
        Map<String, String> headers = new HashMap<>();
        Enumeration<String> headerNames = request.getHeaderNames();
        while (headerNames.hasMoreElements()) {
            String headerName = headerNames.nextElement();
            headers.put(headerName, request.getHeader(headerName));
        }
        return headers;
    }

    private Map<String, String> getHeaders(HttpServletResponse response) {
        return response.getHeaderNames()
                .stream()
                .collect(Collectors.toMap(header -> header, response::getHeader));
    }
}

‚úÖ Ensures the response body is written back to the client
‚úÖ Fixes the issue of no response being returned


---

2Ô∏è‚É£ Fix CachedBodyHttpServletResponse

üìÇ src/main/java/com/example/api/filter/CachedBodyHttpServletResponse.java

package com.example.api.filter;

import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.WriteListener;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpServletResponseWrapper;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;

public class CachedBodyHttpServletResponse extends HttpServletResponseWrapper {

    private final ByteArrayOutputStream cachedBody = new ByteArrayOutputStream();
    private final PrintWriter writer = new PrintWriter(cachedBody, true, StandardCharsets.UTF_8);
    private boolean responseCommitted = false;

    public CachedBodyHttpServletResponse(HttpServletResponse response) {
        super(response);
    }

    @Override
    public ServletOutputStream getOutputStream() {
        return new ServletOutputStream() {
            @Override
            public void write(int b) throws IOException {
                cachedBody.write(b);
                CachedBodyHttpServletResponse.super.getOutputStream().write(b); // Write back to original response
            }
            @Override
            public boolean isReady() {
                return true;
            }
            @Override
            public void setWriteListener(WriteListener listener) {
            }
        };
    }

    @Override
    public PrintWriter getWriter() {
        return new PrintWriter(cachedBody, true, StandardCharsets.UTF_8) {
            @Override
            public void write(String s, int off, int len) {
                super.write(s, off, len);
                try {
                    CachedBodyHttpServletResponse.super.getWriter().write(s, off, len);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        };
    }

    public String getBody() {
        return cachedBody.toString(StandardCharsets.UTF_8);
    }
}

‚úÖ Ensures the response is committed after logging
‚úÖ Allows both logging and returning the response to the client


---

3Ô∏è‚É£ Why This Fix Works


---

4Ô∏è‚É£ Final Console Log Output

When calling:

curl -X POST "http://localhost:8080/api/test" -H "Content-Type: application/json" -d '{"name":"John"}'

‚úÖ Logs Request

2024-02-04 12:00:01 INFO Incoming Request: POST /api/test | Headers: {Content-Type=application/json} | Body: {"name":"John"}

‚úÖ Logs Response

2024-02-04 12:00:02 INFO Outgoing Response: Status 200 | Headers: {Content-Type=application/json} | Body: "Response from /test endpoint"

‚úÖ Response is Returned to the Client

Response from /test endpoint


---

5Ô∏è‚É£ Summary of Fix

üöÄ Your API now logs requests and responses correctly while returning responses as expected!
Would you like to add request processing time tracking next? ‚è≥

