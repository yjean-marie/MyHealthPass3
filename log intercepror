The error "getReader() has already been called for this request" occurs because Spring Boot only allows reading the request body once. Since LoggingInterceptor tries to read the body in preHandle(), it cannot be read again by the controller.


---

Solution: Use a Filter Instead of an Interceptor

Instead of HandlerInterceptor, we should use a Spring Boot Filter that wraps the request before it reaches the controller.


---

1. Create a Logging Filter

üìÇ src/main/java/com/example/api/filter/LoggingFilter.java

package com.example.api.filter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

@Component
public class LoggingFilter implements Filter {

    private static final Logger logger = LoggerFactory.getLogger(LoggingFilter.class);

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {
            CachedBodyHttpServletRequest wrappedRequest = new CachedBodyHttpServletRequest((HttpServletRequest) request);
            CachedBodyHttpServletResponse wrappedResponse = new CachedBodyHttpServletResponse((HttpServletResponse) response);

            // Extract Headers
            Map<String, String> requestHeaders = getHeaders(wrappedRequest);
            String requestBody = wrappedRequest.getBody();

            logger.info("Incoming Request: {} {} | Headers: {} | Body: {}",
                    wrappedRequest.getMethod(), wrappedRequest.getRequestURI(), requestHeaders, requestBody);

            // Continue processing the request
            chain.doFilter(wrappedRequest, wrappedResponse);

            // Extract Response Headers and Body
            Map<String, String> responseHeaders = getHeaders(wrappedResponse);
            String responseBody = wrappedResponse.getBody();

            logger.info("Outgoing Response: Status {} | Headers: {} | Body: {}",
                    wrappedResponse.getStatus(), responseHeaders, responseBody);
        } else {
            chain.doFilter(request, response);
        }
    }

    private Map<String, String> getHeaders(HttpServletRequest request) {
        Map<String, String> headers = new HashMap<>();
        Enumeration<String> headerNames = request.getHeaderNames();
        while (headerNames.hasMoreElements()) {
            String headerName = headerNames.nextElement();
            headers.put(headerName, request.getHeader(headerName));
        }
        return headers;
    }

    private Map<String, String> getHeaders(HttpServletResponse response) {
        return response.getHeaderNames()
                .stream()
                .collect(Collectors.toMap(header -> header, response::getHeader));
    }
}


---

2. Use Cached Request Wrapper

üìÇ src/main/java/com/example/api/filter/CachedBodyHttpServletRequest.java

package com.example.api.filter;

import jakarta.servlet.ReadListener;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletRequestWrapper;
import java.io.*;

public class CachedBodyHttpServletRequest extends HttpServletRequestWrapper {

    private final String cachedBody;

    public CachedBodyHttpServletRequest(HttpServletRequest request) throws IOException {
        super(request);
        StringBuilder requestBody = new StringBuilder();
        try (BufferedReader reader = request.getReader()) {
            String line;
            while ((line = reader.readLine()) != null) {
                requestBody.append(line).append(System.lineSeparator());
            }
        }
        this.cachedBody = requestBody.toString().trim();
    }

    @Override
    public ServletInputStream getInputStream() {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(cachedBody.getBytes());
        return new ServletInputStream() {
            @Override
            public int read() {
                return byteArrayInputStream.read();
            }
            @Override
            public boolean isFinished() {
                return byteArrayInputStream.available() == 0;
            }
            @Override
            public boolean isReady() {
                return true;
            }
            @Override
            public void setReadListener(ReadListener listener) {}
        };
    }

    public String getBody() {
        return cachedBody;
    }
}


---

3. Use Cached Response Wrapper

üìÇ src/main/java/com/example/api/filter/CachedBodyHttpServletResponse.java

package com.example.api.filter;

import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.WriteListener;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpServletResponseWrapper;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;

public class CachedBodyHttpServletResponse extends HttpServletResponseWrapper {

    private final ByteArrayOutputStream cachedBody = new ByteArrayOutputStream();
    private final PrintWriter writer = new PrintWriter(cachedBody, true, StandardCharsets.UTF_8);

    public CachedBodyHttpServletResponse(HttpServletResponse response) {
        super(response);
    }

    @Override
    public ServletOutputStream getOutputStream() {
        return new ServletOutputStream() {
            @Override
            public void write(int b) {
                cachedBody.write(b);
            }
            @Override
            public boolean isReady() {
                return true;
            }
            @Override
            public void setReadListener(WriteListener listener) {}
        };
    }

    @Override
    public PrintWriter getWriter() {
        return writer;
    }

    public String getBody() {
        return cachedBody.toString(StandardCharsets.UTF_8);
    }
}


---

4. How This Fix Works


---

5. Example Console Logs

Incoming Request

2024-02-04 12:00:01 INFO Incoming Request: POST /api/test | Headers: {Content-Type=application/json, Authorization=Bearer abc123} | Body: {"name":"John"}

Outgoing Response

2024-02-04 12:00:02 INFO Outgoing Response: Status 200 | Headers: {Content-Type=application/json} | Body: Response from /test endpoint


---

6. Final Thoughts

üöÄ Fixed the getReader() has already been called issue.
üöÄ Logs request & response headers + body correctly.
üöÄ More efficient than an Interceptor for body logging.

Would you like to log request processing time as well? ‚è≥

