Thanks — that screenshot and your uploaded file give me a complete understanding of:

Where and how the SendSmsResponse is returned

How messageID is retrieved

Where to introduce the logic for storing the messageID

Where to log a critical error if messageID == null


Now here’s your fully detailed and testable Jira story, complete with technical notes and Gherkin-formatted acceptance criteria tailored for your code.


---

📝 Jira Story

Title:
Capture and store messageID from SMS API response; log critical error if null

Description:
As a developer, I want to store the messageID returned by Teleios (from SendSmsResponse) in a new Message table. If the messageID is null, the system must log a critical error and skip message table insertion.


---

🔧 Technical Details

Update KYCServiceImpl.java to check response.getMessageID().

If messageID == null, log a Level.ERROR or Level.FATAL log:

> "CRITICAL: Teleios returned null messageID for UUID: [uuid], Phone: [phoneNumber]"



If messageID != null, insert a new row into the Message table with:

message_id = response.getMessageID()

phone_number = notificationMetaData.getClientMobile()

status = response.getStatus()

timestamp = response.getTimestamp()

message_period = derived from method

delivery_attempts_count = 1



> Note: You will need to create a new Message JPA entity and MessageRepository if not yet done.




---

✅ Acceptance Criteria (Gherkin Format)

Feature: Store messageID from Teleios and log when missing

  Background:
    Given the Message table has the following columns:
      | message_id             | string, primary key |
      | phone_number           | string              |
      | delivery_status        | string (nullable)   |
      | error_message          | string (nullable)   |
      | run_date               | date (nullable)     |
      | status_timestamp       | datetime (nullable) |
      | message_period         | string (nullable)   |
      | delivery_attempts_count| int (default 1)     |

  Scenario: Teleios returns a valid messageID
    Given a valid SMS request is sent to Teleios
    And the response contains a non-null messageID
    When the KYC service processes the response
    Then a new row should be inserted into the Message table
    And the message_id should match the one returned from Teleios
    And the phone_number should match the original recipient
    And the timestamp should match response.getTimestamp()
    And delivery_status and error_message should be null

  Scenario: Teleios returns a null messageID
    Given a valid SMS request is sent to Teleios
    And the response contains a null messageID
    When the KYC service processes the response
    Then no record should be inserted into the Message table
    And a critical error should be logged with:
      "CRITICAL: Teleios returned null messageID for UUID: <uuid>, Phone: <phone>"

  Scenario: Regression - Successful SMS still behaves correctly
    Given a valid phone number and message
    When Teleios responds successfully with a messageID
    Then the SMS should be considered delivered
    And the Message table should be updated as per normal flow

  Scenario: Regression - SMS send failure (invalid number)
    Given an invalid phone number is used
    When the SMS service attempts to send
    Then no call is made to Teleios
    And no messageID is processed
    And no entry is inserted into the Message table

  Scenario: Regression - Network or server failure when sending SMS
    Given the Teleios API is unavailable
    When a request is sent
    Then the system retries or fails as per current logic
    And no record is inserted into the Message table
    And the error is logged appropriately


---

🧪 QA Checklist

Test messageID presence with a mock response.

Verify DB insertion only occurs when messageID != null.

Confirm logging via application logs (ELK, console, etc.).

Execute regression test cases for SMS delivery, failure, and null inputs.



---

Let me know if you'd like a follow-up story for creating the actual Message table and JPA repository, or if you want this framed for a Confluence doc or Jira Epic layout.


Crystal clear — this is a great refinement.

You're building a system where only one mode (Cron or API) can be active at any given time, controlled by a Vault-stored scheduler_switch. So the job can be triggered either:

Automatically via Cron, or

Manually via API (Stonebranch),


…but never both at the same time, and the system should enforce this using the switch.

Here’s the complete Jira story with all logic and constraints covered, plus robust Gherkin acceptance criteria for both Cron and API execution paths.


---
Story 2a – Implement delivery status job with dual trigger: Cron & API (Stonebranch), controlled by Vault-based scheduler switch
Description:
As a developer, I want to support two methods for triggering the Teleios delivery status job — via a daily cron and via a REST API endpoint — but only one method should be active at a time. A scheduler switch stored in Vault (scheduler_selector_switch) will determine the active mode: either "CRON" or "API". The inactive path should be disabled at runtime.

Both triggers must call the same service that reads the Teleios SMS delivery status file from S3 and processes it.

🔧 Technical Implementation Notes:
Create a shared method, e.g. processTeleiosDeliveryStatusFile(), in DeliveryStatusService.

Cron job uses @Scheduled(cron = "...") but checks the Vault switch before execution.

API endpoint: POST /jobs/teleios-delivery-status

Also checks Vault before triggering the job.

Use Vault variable: scheduler_selector_switch (values: CRON, API)

S3 details:

Bucket: rbc-client-delivery

Path: teleios/status/

Filename pattern: delivery-status-YYYYMMDD.csv

✅ Acceptance Criteria (Gherkin Format)
gherkin
Copy
Edit
Feature: Trigger delivery status job via Cron or API, governed by scheduler switch

  Background:
    Given the system reads the scheduler switch value from Vault
    And the value is either "CRON" or "API"

  Scenario: Cron executes the job when switch is set to CRON
    Given the scheduler_selector_switch is set to "CRON"
    When the scheduled cron job triggers
    Then the delivery status job should execute
    And the delivery file "delivery-status-YYYYMMDD.csv" should be read from S3 bucket "rbc-client-delivery" path "teleios/status/"
    And the file contents should be passed for processing

  Scenario: Cron is blocked when switch is set to API
    Given the scheduler_selector_switch is set to "API"
    When the scheduled cron job triggers
    Then the job should not run
    And a log message should be written:
      "Cron execution skipped due to scheduler switch set to API"

  Scenario: API triggers the job when switch is set to API
    Given the scheduler_selector_switch is set to "API"
    And a POST request is made to /jobs/teleios-delivery-status
    When the endpoint is hit
    Then the job should execute
    And the delivery file should be read and passed for processing
    And return 200 OK with a success message

  Scenario: API is blocked when switch is set to CRON
    Given the scheduler_selector_switch is set to "CRON"
    When a POST request is made to /jobs/teleios-delivery-status
    Then the request should return 403 Forbidden
    And the response should contain:
      {
        "status": "failure",
        "message": "API trigger disabled by scheduler switch"
      }

  Scenario: Manual trigger logs audit trail
    When the job is triggered via the API
    Then the system logs:
      "Manual trigger: Teleios delivery job executed via Stonebranch"
🧪 QA Checklist
 Simulate Vault toggle between "CRON" and "API" values and confirm correct path executes.

 Validate that file delivery-status-YYYYMMDD.csv is fetched from rbc-client-delivery/teleios/status/.

 Validate 403 response when wrong method is used.

 Confirm logging messages appear per scenario.

 Mock S3 file not found and confirm error handling.

📘 Story 2b – Parse delivery status file and update Message and MessageLog tables
Description:
As a developer, I want the delivery status job to parse the Teleios delivery status file from S3 and update the Message table with the latest delivery status while also appending a historical record to the MessageLog table. This supports audit tracking of all delivery attempts.

🗂 Tables to Use
Message Table

Field	Type	Description
message_id	string (PK)	Unique ID from Teleios
phone_number	string	Recipient number
delivery_status	string, nullable	Latest status
error_message	string, nullable	Error from delivery
status_timestamp	datetime, nullable	Time status updated
run_date	date, nullable	Date the job ran
message_period	string, nullable	Period label (optional)
delivery_attempts_count	int, default 1	Tracks how many attempts made

MessageLog Table

Field	Type	Description
message_log_id	PK	Auto-generated
message_id	FK to Message	
delivery_status	string	Status for the attempt
error_message	string	Error from Teleios (if any)
status_timestamp	datetime	Time of delivery update
run_date	date	Execution day
source	string	e.g. "Teleios File"
created_at	timestamp	Record creation timestamp

🔧 Implementation Notes:
Each row in the delivery file includes:
MessageId, Timestamp, Delivered_Status, ErrorMessage, RunDate

For each valid MessageId in the file:

Update the matching row in Message table

If it exists, update status and timestamp

If it doesn't exist, log a warning (do not insert)

Insert a new row into MessageLog with full delivery record

Source for MessageLog = "Teleios File"

✅ Acceptance Criteria (Gherkin Format)
gherkin
Copy
Edit
Feature: Process Teleios delivery status file and update DB

  Scenario: Message and MessageLog tables updated correctly
    Given the file contains a row with message_id "abc123"
    And that message exists in the Message table
    When the job runs
    Then the Message table is updated with Delivered_Status, ErrorMessage, and Timestamp
    And a new MessageLog row is inserted with source = "Teleios File"

  Scenario: File contains unknown message ID
    Given the file contains message_id "unknown123"
    And that message does not exist in the Message table
    When the job runs
    Then no Message row is created
    And a warning is logged:
      "Warning: message_id unknown123 not found in Message table"

  Scenario: File contains multiple delivery attempts for same message
    Given multiple rows with the same message_id exist in the file
    When the job runs
    Then the Message table should reflect the latest timestamp row
    And all rows should be recorded in the MessageLog table

  Scenario: Malformed row is skipped
    Given a row is missing required fields
    When the job runs
    Then the malformed row is logged and skipped
    And other valid rows are processed

  Scenario: Run date is stored with all updates
    Given the file contains RunDate "2025-06-23"
    Then both Message and MessageLog rows store this run date
🧪 QA Checklist
 Upload mock file with valid rows and test updates.

 Confirm delivery_status, error_message, and timestamp update in Message table.

 Confirm MessageLog entries are appended.

 Confirm that unknown message IDs are skipped with warning log.

 Confirm correct run_date and created_at values are set.

 Upload a file with malformed rows and confirm they're skipped.
