On macOS, “permission denied for /usr” happens because /usr is SIP-protected (read-only). Only /usr/local is writable, and even there you may need sudo. Easiest fix: don’t write anywhere under /usr at all—keep your truststore in your home folder and point Java to it.

Do this (no admin needed)

1. Put the truststore in your home:



mkdir -p "$HOME/certs"
"$(/usr/libexec/java_home)/bin/keytool" \
  -importcert -trustcacerts -noprompt \
  -alias mycert \
  -file "$HOME/Downloads/server_cert.cer" \
  -keystore "$HOME/certs/custom-truststore.jks" \
  -storepass changeit

2. In IntelliJ → Run/Debug Config → VM options:



-Djavax.net.ssl.trustStore=/Users/<you>/certs/custom-truststore.jks
-Djavax.net.ssl.trustStorePassword=changeit
# If you used PKCS12 instead of JKS, also add:
# -Djavax.net.ssl.trustStoreType=PKCS12

That mirrors your Windows setup exactly, avoids /usr, and avoids permission issues.

If you really want a shared location

Use /usr/local (writable area) and sudo:

sudo mkdir -p /usr/local/share/java
sudo cp "$HOME/Downloads/server_cert.cer" /usr/local/share/java/
sudo "$(/usr/libexec/java_home)/bin/keytool" \
  -importcert -trustcacerts -noprompt \
  -alias mycert \
  -file /usr/local/share/java/server_cert.cer \
  -keystore /usr/local/share/java/custom-truststore.jks \
  -storepass changeit

Then point IntelliJ VM options to:

-Djavax.net.ssl.trustStore=/usr/local/share/java/custom-truststore.jks
-Djavax.net.ssl.trustStorePassword=changeit

Avoid this

Writing to /usr or /System (SIP blocks it).

Modifying the JDK’s bundled cacerts inside /Library/Java/JavaVirtualMachines/... (requires sudo and is brittle across JDK updates).


If you still get “permission denied,” paste the exact command you ran (with paths obfuscated if needed) and I’ll spot the issue.

