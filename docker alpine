Thanks for confirming — and this tells us something very specific:

> 🧠 Aqua is likely detecting the presence of libexpat via dpkg metadata or linked binaries — not just the .so files — and the base image is deeply tied to it.



Let’s now shift to total removal + replacement strategy instead of trying to surgically patch it.


---

🧨 Why All Attempts Have Failed So Far

Here’s the hard truth:
The nginxinc/nginx-unprivileged:stable image (based on Debian Slim) has libexpat deeply baked into its dependency tree, likely through:

libxml2 (even if removed, it may have residuals)

fontconfig

libfreetype

Or even openssl → ca-certificates → XML tools


These all may cause:

APT package removal to silently fail or be reversed

Residual files in /var/lib/dpkg, /usr/share/doc, or symlinks that Aqua still detects



---

✅ The Real Fix: Build Your Own Minimal NGINX from debian:bullseye-slim or Use nginx:alpine

To truly eliminate CVE-2025-59375, you need:

🧼 Option A: Use a custom-built image that:

Starts from a base like debian:bullseye-slim or scratch

Installs only the binaries you need

Avoids libexpat entirely


🧼 Option B (Best Fast Path): Switch to nginx:1.27-alpine

This image:

Does not include libexpat by default

Has a small attack surface

Works beautifully with hardened pipelines



---

🧱 Alpine Tradeoffs (and Solutions)

Challenge	Solution

No apt	Use apk instead
No bash	Use sh or install bash via apk add bash
May not have user 101	Add: RUN adduser -u 101 -D appuser
File paths may vary slightly	Use find / to explore if needed



---

✅ Final Suggestion: Switch to nginx:1.27-alpine

Here’s a working hardened Dockerfile:

FROM nginx:1.27-alpine

# Optional: Add user 101 if your app expects it
RUN adduser -u 101 -D appuser

# Copy app files
COPY ./dist/rbcc-kyc-refresh-ui /usr/share/nginx/html/kyc-portal
COPY ./default.conf.template /etc/nginx/templates/default.conf.template

# Copy and set up scripts
RUN mkdir -p /docker-entrypoint.d
COPY docker-entrypoint.sh /docker-entrypoint.d/
COPY inject-secrets.sh /docker-entrypoint.d/
RUN chmod +x /docker-entrypoint.d/*.sh

# Optional log directory
RUN mkdir -p /app/logs && chown -R 101 /app/logs /usr/share/nginx/html/

USER 101
CMD ["nginx", "-g", "daemon off;"]
EXPOSE 8080

> 🚀 Aqua will likely be clean on this image — libexpat is not present at all in Alpine builds.




---

🔐 BONUS: Want to Stay on Debian + Harden?

Then the only real option is to build your own NGINX image from debian:bullseye-slim using:

Only the needed nginx-core packages

Custom compile flags

No libexpat in the dependency tree


But that’s more work than switching to Alpine.


---

✅ TL;DR

| ❌ Problem | nginx-unprivileged has deeply linked libexpat, which can’t be removed safely | | ✅ Aqua-safe Fix | Switch to nginx:1.27-alpine, which doesn’t include libexpat | | 🛠 Fastest Path | Use the hardened Alpine Dockerfile above and validate with Aqua |


---

Want me to generate this Alpine-based image with your configs fully patched in? Or send you the Aqua scan diff between Alpine and unprivileged for validation?