You're absolutely right! The last catch (Exception e) block in T24Service would catch everything, including 4XX errors, which would incorrectly map them as INTERNAL_SERVER_ERROR. Let's fix that so only true 5XX errors and unexpected failures are caught by the final block.


---

‚úÖ Corrected T24Service to Distinguish Between 4XX and 5XX Errors

Modify the catch blocks so that WebClient 4XX and 5XX errors are handled properly.

üìå T24Service.java (Fixed Version)

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;

@Service
public class T24Service {

    private final WebClient webClient;

    public T24Service(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder
                .baseUrl("https://u1vvar0d02.devg.rbc.com:9193")
                .build();
    }

    public boolean isValidLeadBranch(String companyId) {
        try {
            T24BranchResponse response = webClient.get()
                    .uri("/rbccdtgiapis/api/v1.0.0/party/company/v1/getCompanyDetails")
                    .header("companyId", companyId)
                    .retrieve()
                    .onStatus(HttpStatus::is4xxClientError, response -> 
                        Mono.error(new CustomApiException(ErrorCode.RESOURCE_NOT_FOUND, 
                            "Lead branch '" + companyId + "' could not be found."))
                    )
                    .onStatus(HttpStatus::is5xxServerError, response -> 
                        Mono.error(new CustomApiException(ErrorCode.SERVICE_UNAVAILABLE, 
                            "T24 API is currently unavailable."))
                    )
                    .bodyToMono(T24BranchResponse.class)
                    .block();

            // If the response is successful but the branch ID doesn't exist, return a 404
            if (response == null || response.getBody() == null || 
                response.getBody().stream().noneMatch(branch -> branch.getCompanyId().equals(companyId))) {
                throw new CustomApiException(ErrorCode.RESOURCE_NOT_FOUND, 
                    "Lead branch '" + companyId + "' could not be found.");
            }

            return true;

        } catch (WebClientResponseException e) {
            // Ensure 4XX errors are properly handled
            if (e.getStatusCode().is4xxClientError()) {
                throw new CustomApiException(ErrorCode.RESOURCE_NOT_FOUND, 
                    "Lead branch '" + companyId + "' could not be found.");
            }
            // Ensure 5XX errors are properly handled
            else if (e.getStatusCode().is5xxServerError()) {
                throw new CustomApiException(ErrorCode.SERVICE_UNAVAILABLE, 
                    "T24 API is currently unavailable.");
            }
            // If another WebClient error happens
            throw new CustomApiException(ErrorCode.INTERNAL_SERVER_ERROR, 
                "Unexpected error while calling T24: " + e.getMessage());

        } catch (Exception e) {
            // This only catches truly unexpected errors (not WebClient-related ones)
            throw new CustomApiException(ErrorCode.INTERNAL_SERVER_ERROR, 
                "An unexpected error occurred: " + e.getMessage());
        }
    }
}


---

üî• What This Fixes

‚úÖ 4XX Errors (Client Errors) Now Return RESOURCE_NOT_FOUND (E4040)
‚úÖ 5XX Errors (T24 API Downtime) Return SERVICE_UNAVAILABLE (E5030)
‚úÖ Truly Unexpected Issues Are Caught as INTERNAL_SERVER_ERROR (E5000)
‚úÖ If the API call succeeds but the branch ID is missing, we still return a proper E4040


---

üöÄ Now Your API Will Return the Correct Errors

‚ùå If the Lead Branch Is Invalid (4XX)

{
    "errorCode": "E4040",
    "message": "Lead branch 'TT0010001' could not be found."
}


---

‚ùå If T24 API Is Down (5XX)

{
    "errorCode": "E5030",
    "message": "T24 API is currently unavailable."
}


---

‚ùå If an Unexpected Internal Error Occurs (5XX)

{
    "errorCode": "E5000",
    "message": "An unexpected error occurred: [error details]"
}


---

üí° Final Steps

1Ô∏è‚É£ Use this updated version of T24Service.java.
2Ô∏è‚É£ Test by making requests with valid and invalid branch codes.
3Ô∏è‚É£ Try simulating a 5XX T24 API error to see the correct E5030 response.

üöÄ Now your error handling is bulletproof! Let me know if you need any refinements. üî•




Thanks ‚Äî that confirms you‚Äôre throwing a custom exception (CarobbeanException) inside createTZExtract().

The fact that your job is still getting marked as COMPLETED suggests one of the following is happening:

üîç 1. Is CarobbeanException a checked or runtime exception?
If it's a checked exception:
java
Copy
Edit
public class CarobbeanException extends Exception { ... }
Then this code:

java
Copy
Edit
Mono.fromCallable(() -> {
    task.run();
    return true;
})
‚ö†Ô∏è Will not compile unless task.run() explicitly throws that exception ‚Äî but Runnable.run() cannot throw checked exceptions, so the exception will get silently wrapped or not thrown as expected.

‚úÖ Recommended Fix
‚úÖ Option A: Wrap your Runnable with a lambda that catches and rethrows as a RuntimeException
Update your runner to this:

java
Copy
Edit
Mono.fromCallable(() -> {
    try {
        task.run(); // task might throw CarobbeanException
        return true;
    } catch (Exception e) {
        throw new RuntimeException("Wrapped exception from task", e);
    }
})
.flatMap(result -> jobApiService.updateSimplifiedJob(
        createJobUpdateRequest("COMPLETED", null, null, jobId)))
.onErrorResume(e -> {
    log.error("Task threw an error for job {}", jobId, e);
    return jobApiService.updateSimplifiedJob(
        createJobUpdateRequest("FAILED", "ERROR_CODE", e.getMessage(), jobId));
})
.subscribe();
This guarantees any exception inside task.run() ‚Äî including CarobbeanException ‚Äî is caught and passed to onErrorResume.

‚úÖ Option B (Cleaner): Change your method signature to use Callable<Void>
Instead of passing Runnable, change your runner to:

java
Copy
Edit
public void runWithTracking(Long jobId, Callable<Void> task) {
    jobApiService.updateSimplifiedJob(createJobUpdateRequestForStart(jobId)).subscribe();

    Mono.fromCallable(() -> {
        task.call(); // call() can throw checked exceptions
        return true;
    })
    .flatMap(result -> jobApiService.updateSimplifiedJob(
        createJobUpdateRequest("COMPLETED", null, null, jobId)))
    .onErrorResume(e -> {
        log.error("Job [{}] failed: {}", jobId, e.getMessage(), e);
        return jobApiService.updateSimplifiedJob(
            createJobUpdateRequest("FAILED", "ERROR_CODE", e.getMessage(), jobId));
    })
    .subscribe();
}
Then, from your controller:

java
Copy
Edit
asyncJobRunner.runWithTracking(jobId, () -> {
    scheduledTask.createTZExtract(); // can throw CarobbeanException
    return null;
});
‚úÖ This approach:

Fully supports checked exceptions

Doesn‚Äôt need wrapping in RuntimeException

Is clean and expressive

üß† Summary

Problem	Fix
Runnable.run() doesn't allow checked exceptions	üîÅ Wrap in try-catch and rethrow as RuntimeException, or
‚úÖ Change signature to Callable<Void>
CarobbeanException not caught by onErrorResume	‚úÖ Use Mono.fromCallable(...) that can propagate the error
Would you like me to rewrite your final runWithTracking method using the cleaner Callable<Void> approach?




Updated handleJobAsync (using Callable<Void>)
java
Copy
Edit
import java.util.concurrent.Callable;

private Mono<ResponseEntity<ApiResponse>> handleJobAsync(JobCreateRequest jobCreateRequest, Callable<Void> task) {
    return jobApiService.createSimplifiedJob(jobCreateRequest)
        .flatMap(jobEntity -> {
            Long jobId = jobEntity.getJobId();
            log.info("Job [{}] created. Dispatching to background executor.", jobId);
            asyncJobRunner.runWithTracking(jobId, task);

            ApiResponse response = new ApiResponse(true, "Job submitted successfully.", Map.of("jobId", jobId));
            return Mono.just(ResponseEntity.accepted().body(response));
        })
        .onErrorResume(e -> {
            log.error("Failed to create job", e);
            ApiResponse errorResponse = new ApiResponse(false, "Job creation failed: " + e.getMessage(), null);
            return Mono.just(ResponseEntity.badRequest().body(errorResponse));
        });
}
Note the small improvements:

Callable<Void> matches your new AsyncJobRunner signature

Changed data: jobId to a map: Map.of("jobId", jobId) ‚Äî to match your earlier request

Imports: import java.util.Map; and import java.util.concurrent.Callable; may be needed

‚úÖ And in the controller (usage)
Example:

java
Copy
Edit
@PostMapping("/createTZExtract")
public Mono<ResponseEntity<ApiResponse>> createTZExtract(@RequestBody SchedulerTimeRequest input) {
    JobCreateRequest request = JobRequestFactory.forTZExtract();
    request.setSchedulerStartTime(input.getSchedulerStartTime());

    return handleJobAsync(request, () -> {
        scheduledTask.createTZExtract(); // throws CarobbeanException
        return null;
    });
}
Let me know if you'd like to update handleJobAsync to also log the jobType and schedulerStartTime for traceability.
