Hashing a request, especially for purposes like idempotency keys, typically involves creating a string representation of the request payload and then applying a cryptographic hash function to this string. A commonly used hash function for such scenarios is SHA-256, due to its balance between speed and resistance against hash collisions.

Here's a general approach to hashing a request payload in C#:

### Step 1: Convert the Request Payload to a String

First, you need to serialize the request payload to a string. This is often done using JSON serialization, as it's a widely supported format and works well for most types of data.

```csharp
public string SerializeRequest(object requestPayload)
{
    // Newtonsoft.Json
    return JsonConvert.SerializeObject(requestPayload);

    // Or, if you prefer System.Text.Json (available in .NET Core 3.0+)
    // return JsonSerializer.Serialize(requestPayload);
}
```

### Step 2: Compute the SHA-256 Hash

Next, use the SHA-256 algorithm to compute the hash of the serialized string. You'll need to convert the string to a byte array first, as the hashing functions work with bytes.

```csharp
using System.Security.Cryptography;
using System.Text;

public string ComputeSha256Hash(string rawData)
{
    // Create a SHA256   
    using (SHA256 sha256Hash = SHA256.Create())
    {
        // ComputeHash - returns byte array  
        byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));

        // Convert byte array to a string   
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < bytes.Length; i++)
        {
            builder.Append(bytes[i].ToString("x2"));
        }
        return builder.ToString();
    }
}
```

### Step 3: Combine the Steps

Now, you can combine the serialization and hashing steps to create a hash for your request payload.

```csharp
public string GenerateRequestHash(object requestPayload)
{
    string serializedRequest = SerializeRequest(requestPayload);
    return ComputeSha256Hash(serializedRequest);
}
```

### Example Usage

```csharp
var requestPayload = new
{
    CustomerId = 123,
    OrderDate = DateTime.UtcNow,
    OrderTotal = 99.95
};

string requestHash = GenerateRequestHash(requestPayload);
Console.WriteLine($"Hash: {requestHash}");
```

### Security Considerations

- **SHA-256** is generally considered secure for hashing purposes like generating a unique identifier or checksum, but it's important to note that using a hash function for sensitive information requires careful consideration of the security context.
- **Idempotency Keys**: When using hashes as idempotency keys, ensure that the serialized request format is consistent. Small changes in the serialization (like spacing, property order) could result in a different hash.
- **Rate Limiting and Storage**: Consider the implications of storing idempotency keys, such as potential for denial of service attacks and the need for eventual cleanup of old keys.

This approach gives you a straightforward, readable hash of your request that you can use for identifying unique requests, suitable for implementing idempotency in APIs or other scenarios where request uniqueness is crucial.