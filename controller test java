If you're using annotations to validate incoming request data in Java, you are likely using the Jakarta Bean Validation API (formerly Javax) with frameworks such as Spring Boot. The RequestValidator class in the earlier example is unnecessary because validation is automatically handled by annotations and triggered during API request handling.


---

Example of Using Validation Annotations in Spring Boot

1. Define the Request DTO with Validation Annotations

Spring Boot integrates with Jakarta Validation (formerly javax.validation), where you can annotate fields for validation directly.

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

public class UserRequest {

    @NotBlank(message = "Name is required")
    @Size(min = 2, max = 50, message = "Name must be between 2 and 50 characters")
    private String name;

    @NotBlank(message = "Email is required")
    @Email(message = "Invalid email format")
    private String email;

    // Getters and setters
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}


---

2. Create the Controller to Handle Requests

Spring Boot will automatically validate the incoming request data when using @Valid or @Validated.

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @PostMapping
    public ResponseEntity<String> createUser(@Valid @RequestBody UserRequest userRequest) {
        return ResponseEntity.ok("User is valid and created successfully!");
    }
}


---

3. Write Unit Tests for the Validation Logic

When writing unit tests for the validation, you can use Spring Boot Test, MockMvc, and validation groups.

Example Unit Test:

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(UserController.class)
class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    void shouldReturnBadRequestWhenNameIsEmpty() throws Exception {
        String invalidRequest = "{ \"name\": \"\", \"email\": \"valid@email.com\" }";

        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidRequest))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.name").value("Name is required"));
    }

    @Test
    void shouldReturnBadRequestForInvalidEmail() throws Exception {
        String invalidRequest = "{ \"name\": \"John\", \"email\": \"invalid-email\" }";

        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(invalidRequest))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.email").value("Invalid email format"));
    }

    @Test
    void shouldPassForValidInput() throws Exception {
        String validRequest = "{ \"name\": \"Alice\", \"email\": \"alice@example.com\" }";

        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(validRequest))
                .andExpect(status().isOk());
    }
}


---

4. Handling Validation Errors Gracefully

By default, Spring Boot returns a generic response for validation errors. To customize error messages, you can create a global exception handler.

Example Custom Exception Handling:

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getFieldErrors().forEach(error -> 
            errors.put(error.getField(), error.getDefaultMessage()));
        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
    }
}


---

Common Validation Annotations You Can Use

1. Basic Field Validations:

@NotNull – Field must not be null.

@NotBlank – Must not be null and must contain at least one non-whitespace character.

@NotEmpty – Field must contain at least one character.

@Size(min, max) – Limits string length.



2. Numeric Validations:

@Min(value) – Minimum value for numbers.

@Max(value) – Maximum value for numbers.

@Positive – Must be a positive number.

@Negative – Must be a negative number.



3. String and Pattern Validations:

@Email – Must be a valid email format.

@Pattern(regexp = "regex") – Custom regex validation.



4. Date and Time Validations:

@Past – Date must be in the past.

@Future – Date must be in the future.

@PastOrPresent – Date must be in the past or present.





---

Running the Tests

Once you've written the unit tests, you can run them using:

Maven: mvn test

Gradle: gradle test

IDE: Right-click the test and choose "Run"



---

Conclusion

If you're using validation annotations like @NotBlank, @Email, and @Valid, your focus should be on writing unit tests for:

1. Field-level validation (unit tests on DTOs).


2. Controller-level validation (integration tests with MockMvc).


3. Handling validation errors properly (global exception handling).


4. Ensuring validation works in edge cases (boundary values, nulls, empty inputs).



This approach ensures your application enforces business rules correctly and prevents bad data from entering your system.

